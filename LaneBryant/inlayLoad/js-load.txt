const INLAY_ID = "chatInlayEmbed";

const _isEmpty = (str) => {
    return (!str || 0 === str.length || str === undefined);
}

// Show the Embedded Chat Inlay in expanded mode by firing custom show event
const fireChatInlayShowEvent = () => {
    // TODO: disable console msg for Production
    console.log("inlay-oracle-chat-embedded-loaded OK");
    window.oit.fire(new oit.CustomEvent('inlay-oracle-chat-embedded-show', {
        detail: {
            id: INLAY_ID
        }
    }));
    
    const addStylesAndScripts = () => {
        const inlayLaunchForm = window.document.getElementById(INLAY_ID);
        const chatEmbeddedInlay = inlayLaunchForm.contentDocument || inlayLaunchForm.contentWindow.document;
        const inlayHead = chatEmbeddedInlay.getElementsByTagName("head")[0];

        // inject custom styling overrides
        // TODO: replace href with location to dedicated CSS file
        let link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = "https://yourhost/oit-custom.css";
        link.type = "text/css";
        inlayHead.appendChild(link);

        const storageEventHandler = (event) => {
            if (event.key === "inlay-oracle-chat-embedded-chatStatus") {
                const status = JSON.parse(event.newValue);
                if (!_isEmpty(status.chatStatus)) {
                    if (status.chatStatus === "connected") {
                        alert("chat is connected!");
                        // TODO: add site-wide logic to keep track of a Chat being in progress to manage persistence across page turns
                    }
                    if (status.chatStatus === "disconnected") {
                        alert("chat is disconnected!");
                        // TODO: the Chat is done - hide Live Chat icon - trigger MC to reappear
                        // TODO: delay the execution of 'removeInlay' to allow time for customer to access Survey hyperlink
                        setTimeout(() => {
                            window.oit.removeInlay(INLAY_ID);
                            // remove OIT Loader
                            const oitLdr = document.getElementById("oit-loader");
                            if (oitLdr !== null) oitLdr.remove();
                        }, 7500);
                    }
                }
            }
        };
        window.addEventListener("storage", storageEventHandler, false);
    };
    setTimeout(addStylesAndScripts, 0);
}

const loadInlay = () => {

    const oitPageId = "lanebryant-en";
    const siteIntfName = "lanebryant--tst1";

    // Wait for the Embedded Chat Inlay to load
    document.addEventListener('inlay-oracle-chat-embedded-loaded', fireChatInlayShowEvent);

    /**
     * Embedded Chat Inlay element
     */
    let chatInlayElemEmbed = document.createElement("inlay-oracle-chat-embedded");
    chatInlayElemEmbed.setAttribute("id", INLAY_ID);
    chatInlayElemEmbed.setAttribute("class", "inlay");
    chatInlayElemEmbed.setAttribute("site-type", "b2c-service");
    chatInlayElemEmbed.setAttribute("site-url", `${siteIntfName}.widget.custhelp.com`);
    document.body.appendChild(chatInlayElemEmbed);

    /**
     * OIT Loader Script
     */
    let chatInlayLoader = document.createElement("script");
    chatInlayLoader.setAttribute("id", "oit-loader");
    chatInlayLoader.setAttribute("src", `https://${siteIntfName}.widget.custhelp.com/s/oit/latest/common/v0/libs/oit/loader.js`);
    chatInlayLoader.setAttribute("data-oit-page-id", oitPageId);
    chatInlayLoader.setAttribute("data-oit-config-url", "https://yourhost/oit-config.json");
    chatInlayLoader.setAttribute("async", "");
    document.body.appendChild(chatInlayLoader);
}
